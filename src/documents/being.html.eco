---
layout: 'default'
---


<div class="location">
	FUTURE&nbsp;&nbsp;&nbsp;CONCRETE&nbsp;&nbsp;&nbsp;CAPACITY
</div>


<div class="container" id="wellbeing">
	<svg class="chart">
	</svg>
	<!--<div class="row">
		<div class="col-sm-4">
			<h4>
			Capacity
			</h4>
		</div>
		<div class="col-sm-4">
			<h4>
			Clarity
			</h4>
		</div>
		<div class="col-sm-4">
			<h4>
			Concentration
			</h4>
		</div>
	</div>
	<div class="row">
		<div class="col-sm-4">
			<h4>
			Anticipation
			</h4>
		</div>
		<div class="col-sm-4">
			<h4>
			Precarity
			</h4>
		</div>
		<div class="col-sm-4">
			<h4>
			Wandering
			</h4>
		</div>
	</div>-->
</div>

<script src="//d3js.org/d3.v3.min.js"></script>
<script>




var data = [4, 8, 15, 16, 23, 42];

var height = 420,
    width = 600;

var barWidth = width / data.length;

var y = d3.scale.linear()
    .domain([0, d3.max(data)])
    .range([height, 0]);

var chart = d3.select(".chart")
    .attr("width", width)
    .attr("height", height);

var bar = chart.selectAll("g")
    .data(data)
  .enter().append("g")
    .attr("transform", function(d, i) { return "translate(" + i * barWidth + ", 0)"; });

bar.append("rect")
	.attr("y", function(d) { return y(d); })
    .attr("width", barWidth - 5)
    .attr("height", function(d) { return height - y(d); });

bar.append("text")
    .attr("y", function(d) { return y(d) - 10; })
    .attr("x", barWidth / 2)
    .attr("dy", ".35em")
    .text(function(d) { return d; });

/*


var data = [4, 8, 15, 16, 23, 42];

var height = 420,
    width = 600;

var y = d3.scale.linear()
    .range([height, 0]);

    console.log(y);

d3.tsv(data, type, function(error, data) {
  y.domain([0, d3.max(data, function(d) { return d.value; })]);

  var barWidth = width / data.length;

  var bar = chart.selectAll("g")
      .data(data)
    .enter().append("g")
      .attr("transform", function(d, i) { return "translate(" + i * barWidth + ",0)"; });

  bar.append("rect")
      .attr("y", function(d) { return y(d.value); })
      .attr("height", function(d) { return height - y(d.value); })
      .attr("width", barWidth - 1);

  bar.append("text")
      .attr("x", barWidth / 2)
      .attr("y", function(d) { return y(d.value) + 3; })
      .attr("dy", ".75em")
      .text(function(d) { return d.value; });
});

y.domain([0, d3.max(data, function(d) { return d.value; })]);

var barWidth = width / data.length;

var chart = d3.select(".chart")
    .attr("height", height)
    .attr("width", width);

var bar = chart.selectAll("g")
    .data(data)
  .enter().append("g")
	.attr("transform", function(d, i) { return "translate(" + i * barWidth + ",0)"; });

bar.append("rect")
	.attr("y", function(d) { return y(d.value); })
	.attr("height", function(d) { return height - y(d.value); })
	.attr("width", barWidth - 1);

bar.append("text")
	.attr("x", barWidth / 2)
	.attr("y", function(d) { return y(d.value) + 3; })
	.attr("dy", ".75em")
	.text(function(d) { return d.value; });

function type(d) {
  d.value = +d.value; // coerce to number
  return d;
}*/

</script>